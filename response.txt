
We thank the referee for the close reading of the paper and the insightful 
comments.  We provide a response to specific comments from the referee
and ths statistical editor below.

> There are some stylistic issues with the text. I have left comments inline
>  where appropriate.


> More generally, given the technical nature of the work being described here,
> I frequently found myself wanting a small code snippet that demonstrated the 
> new/improved functionality of the packages being described. Perhaps the 
> authors could find a way to include short code examples where appropriate, 
> either inline in the paper body or in the appendix.

We did include code snippets in the first astropy paper from 2013, and
it is not much work; we could use the same scripts to provide nicely
formatted code examples with appropriate syntax highlighting here. However,
we have made a conscious decision to avoid that this time as far as
possible. We will explain our reasoning below, but if the referee
insists, we can quickly add a few examples in a second revision.

The main reasons why we chose NOT to include code samples are:

- While we aim for stability, many of the newsest features are still
  considered provisional, meaning that their API can still change. The
  paper describes astropy 2.0, but at the time of writing this,
  astropy 3.0 is already released. We hope that this paper is useful
  for years to come. Code examples for a specific version are at risk
  of being outdated much sooner than that.

- Code examples belong in the documentation. In the documentation at
  cods.astropy.org we provide extensive examples with enough comments
  to actually understand what is going on. If readers are curious, we
  want them to read the documentation.

- It takes a lot of space to explain a code example well. Currently,
  the text lists the names of the most important classes or
  functions. To give a meaningful example that shows these classes in
  action and is useful to people not familiar with astropy (or even
  Python), we would have to detail several parameters and the format
  of the results. We think that it is more useful to explain the
  general concept in the paper and not the names and the specific
  implementation of the functions and parameters.

- Most new features would require some setup. For example, showing the
  code for WCS axis plotting is not very useful without loading an
  image with a WCS in it first. More complex features profit more from
  code examples, but they also require much more setup to make such an
  example self-consistent and useful. Again, the documentation is a better
  place for that.

As a compromise, we have added links to the documentation in many places and
there is a link in the introduction that points to the github repository where
this article is written. That repository contains (and the text in the
introduction says this) the scripts that we used to generate the figures.


> Specific issues that need to be corrected: There are some errors in the paper
> (inline comments left where appropriate), for example, Figure 6 has a fairly 
> major issue with either the wrong caption or the wrong figure but I'm sure 
> this is easily addressed. I have left comments throughout the modified 
> 'main.tex' file in the form `\inlinecomment{REVIEWER}{Comment}`

> More generally I have a few comments/concerns:

> Given the title of this paper, I expected to see more discussion by the 
> authors about the inclusivity of their community. An uber-skeptical reader 
> could make the assessment that the Astropy community has a code of conduct
> therefore believes it's inclusive. I suspect that the community is doing 
> much more than this though... So, has any attempt been made by the authors 
> to quantify the inclusivity of the Astropy community? There's a growing 
> literature in the quantitative social sciences studying open source 
> communities that the authors might want to look into: e.g. the work of 
> Gousios http://www.gousios.gr/publications.html and Vasilescu 
> https://cmustrudel.github.io/publications/ come to mind. Some discussion 
> or attempt to quantify the inclusivity is recommended.

We thank the referee for bringing up this important point. After some discussion
within the Astropy community, it became clear that a section regarding inclusion 
is beyond the scope of the current paper. Quantitative analysis of the Astropy 
community demographics is warranted. However, this is a serious undertaking 
beyond the capabilities of our community, and it may require IRB approval. Based 
on the referee's comment, we have established initial contact with the NumFOCUS 
Diversity & Inclusion in Scientific Computing (DISC) program. Results will not 
be available in time for this paper. We have opted to remove "inclusive" from 
the paper title to make room for future study and dialogue.

> The phase 'open development' is used a few times but isn't really defined or 
> connected to the broader open source ecosystem.  What other communities are 
> working in this way? How novel is 'open development' by their assessment? For 
> example, other communities have adopted policies that encourage community 
> contribution - most notable is the Node.js Foundation's contribution policies
> designed to promote 'Healthy Open Source' 
> https://medium.com/the-node-js-collection/healthy-open-source-967fa8be7951 . 
> How does the Astropy community efforts compare to this?


> A number of times I found myself wondering how the Astropy projects decides 
> whether to build their own package or leverage something available in the 
> scientific Python ecosystem? On the face of it it seems like every decision 
> made by the Astropy project to build a new core package only increases the 
> long term cost/overhead of maintaining this functionality. For example, 
> Section 3.5.2 describes `astropy.table` and notes that there's similarities 
> to the pandas package and numpy arrays. The functionality described in 
> `astropy.nddata` also sounds somewhat generic. Some discussion as to why 
> existing community tools (such as pandas) weren't used would be very welcome. 
> In addition, if the answer to this question is that these other tools don't 
> support all of the functionality the Astropy community needs (e.g. ability to
> handle Quantities with units in tables) are any efforts being made by the 
> Astropy community to contribute these changes to packages such as Pandas?

________________________

> Note from statistical editor. 

> In sec 3.11.3, a sentence can be added warning users about difficulties in 
> interpreting the statistical significance of Lomb -Scargle periodogram peaks. 
> This is important because unreliable interpretation is common, and warnings 
> are not given elsewhere (e.g. NASA Exoplanet Archive Periodogram Service). 
> A good reference is Vanderplas 2017 (https://arxiv.org/abs/1703.09824) 
> soon to appear in the ApJ Suppl.

A short note directing the reader to Vanderplas (2007) was included. 
